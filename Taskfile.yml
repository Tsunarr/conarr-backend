# https://taskfile.dev

tasks:
  bruno:all:
    cmds:
      - task: bruno:test:PR
  bruno:test:PR:
    cmds:
      - bru run --env "Jellyfin_PR"
    dir: bruno/pyconarr
    silent: true
  commitizen:pre-release:alpha:
    cmds:
      - cz bump --prerelease alpha
      - git push
      - git push --tags
    silent: true
  commitizen:test:pre-rel:
    cmds:
      - cz bump --dry-run --prerelease alpha
    silent: true
  docker:build:
    vars:
      PYCONARR_VERSION:
        sh: poetry run toml get --toml-path pyproject.toml tool.poetry.version
    cmds:
      - docker build -t pyconarr:test --build-arg PYCONARR_VERSION={{.PYCONARR_VERSION}} .
    silent: true
  docker:test:
    cmds:
      - docker run --rm -v ${LOCALWORKSPACE}/config:/home/pyconarr/config --name pyconarr_test pyconarr:test
    deps:
      - docker:build
    silent: true
  docker:kill:
    cmds:
      - docker kill pyconarr_test
    silent: true
  docker:it:
    cmds:
      - docker run -it --rm -v ${LOCALWORKSPACE}/config:/home/pyconarr/config --name pyconarr_test pyconarr:test "/bin/sh"
    deps:
      - docker:build
    silent: true
  github:generate-config:
    silent: true
    dir: config
    cmds:
      - cp pyconarr.yml pyconarr.github.yml
      - poetry run yq -i -y '.jellyfin.admin_token = ""' pyconarr.github.yml
      - base64 -w 0 pyconarr.yml
      - rm -f pyconarr.github.yml
  install:
    cmds:
      - poetry install
    internal: true
    silent: true
  megalinter:test:
    cmds:
      - docker run --pull=always --rm -v ${LOCALWORKSPACE}:/tmp/lint -w
        /tmp/lint oxsecurity/megalinter:v7
    silent: true
  poetry:build:
    cmds:
      - poetry build
    deps:
      - install
    silent: true
  poetry:coverage:
    cmds:
      - poetry run coverage xml
      - poetry run coverage lcov
    internal: true
    silent: true
  poetry:run:
    cmds:
      - poetry run uvicorn --app-dir pyconarr main:app --reload
        --log-config=config/log.yaml
    deps:
      - install
    interactive: true
    silent: true
  poetry:test:all:
    cmds:
      - poetry run pytest
      - task: poetry:coverage
    silent: true
  poetry:test:ci:
    cmds:
      - poetry run pytest -m "unit or component"
      - task: poetry:coverage
    deps:
      - install
    silent: true
  poetry:test:component:
    cmds:
      - poetry run pytest -m component
      - task: poetry:coverage
    deps:
      - install
    silent: true
  poetry:test:integration:
    cmds:
      - poetry run pytest -m integration
      - poetry run coverage xml
    deps:
      - install
    silent: true
  poetry:test:unit:
    cmds:
      - poetry run pytest -m unit
      - task: poetry:coverage
    deps:
      - install
    silent: true
version: "3"
