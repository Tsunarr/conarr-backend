# https://taskfile.dev

dotenv:
  - ".env"

env:
  PYCONARR_VERSION:
    sh: poetry run toml get --toml-path pyproject.toml tool.poetry.version 2> /dev/null || echo ""

vars:
  TASK_REPO_TAG: "0.1.1"
includes:
  bootstrap: ./.config/taskfiles/bootstrap.yml
  install: ./.config/taskfiles/install.yml
  tests: ./.config/taskfiles/tests.yml
  tools: ./.config/taskfiles/tools.yml
version: "3"

tasks:
  bootstrap:
    aliases:
      - default
    silent: true
    cmds:
      - task: bootstrap:init
      - "{{.TASK_BINARY_PATH}} install"
      - "{{.TASK_BINARY_PATH}} --list-all"
  bootstrap:clean:
    silent: true
    cmds:
      - rm -rf .config/taskfiles/common
      - task: bootstrap
  install:
    cmds:
      - task: install:deps
  run:
    silent: true
    interactive: true
    deps:
      - install
    cmds:
      - task: tools:poetry:run
        vars:
          POETRY_APP_DIR: "pyconarr"
          POETRY_MODULE: "main:app"
          POETRY_LOG_CONFIG: "config/log.yaml"
  tests:full:
    cmds:
      - task: tools:commitizen:bump:test
      - task: tests:bruno:wiremock
      - task: tests:bruno:PR
  tests:ci:
    cmds:
      - task: tools:poetry:test
        vars:
          POETRY_PYTEST_OPTIONS: "-m 'unit or component'"
  tests:component:
    cmds:
      - task: tools:poetry:test
        vars:
          POETRY_PYTEST_OPTIONS: "-m 'component'"
  tests:integration:
    cmds:
      - task: tools:poetry:test
        vars:
          POETRY_PYTEST_OPTIONS: "-m 'integration'"
  tests:unit:
    cmds:
      - task: tools:poetry:test
        vars:
          POETRY_PYTEST_OPTIONS: "-m 'unit'"
  tests:
    cmds:
      - task: tools:poetry:test
  coverage:
    cmds:
      - task: tools:poetry:coverage
  build:docker:
    cmds:
      - task: tools:docker:build
        vars:
          DOCKER_BUILD_ARGS: "PYCONARR_VERSION={{.PYCONARR_VERSION}}"
          DOCKER_IMAGE_NAME: "pyconarr"
          DOCKER_IMAGE_TAG: "test"
  build:poetry:
    aliases:
      - build
    cmds:
      - task: tools:poetry:build
